# -*- coding: utf-8 -*-
"""real_build.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fa8NMn08RuWE4-PAmf8X9kjSFz1z5jTE
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install chart_studio yfinance yahoofinancials iexfinance nsepy yahoo_fin

import numpy as np
from bs4 import BeautifulSoup as bs
from pandas.util.testing import assert_frame_equal
import pandas as pd
import pandas_datareader as pdr
from pandas_datareader import data as wb
pd.options.display.max_rows    
pd.options.display.max_columns = 50
pd.options.display.max_rows = 999

from pandas.plotting import register_matplotlib_converters
register_matplotlib_converters()
import matplotlib.pyplot as plt
# %matplotlib inline
import cufflinks as cf
cf.go_offline(connected=True)
import chart_studio.plotly as py
import plotly
import plotly.tools as tls
import plotly.graph_objs as go
import plotly.offline as ply
plotly.offline.init_notebook_mode(connected=True)

import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsRegressor
from sklearn.feature_selection import RFE
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import r2_score, median_absolute_error, mean_absolute_error
from sklearn.metrics import median_absolute_error, mean_squared_error, mean_squared_log_error
from scipy.optimize import minimize
import statsmodels.tsa.api as smt
import statsmodels.api as sm
from tqdm import tqdm_notebook
from itertools import product

import yfinance as yf
from yahoofinancials import YahooFinancials
from yahoo_fin.stock_info import get_analysts_info
from yahoo_fin.stock_info import *
import requests
import iexfinance
from iexfinance.stocks import Stock
from iexfinance.stocks import get_historical_data
from iexfinance.stocks import get_historical_intraday
from iexfinance.refdata import get_symbols
from iexfinance.data_apis import get_data_points
from iexfinance.data_apis import get_time_series
from iexfinance.altdata import get_social_sentiment
from iexfinance.altdata import get_ceo_compensation

import locale
from datetime import date, datetime, timedelta
from nsepy import get_history
from urllib.request import urlopen
import os
import time
import csv
import json
import requests
from patsy import dmatrices
import warnings
warnings.filterwarnings('ignore')

def ST_Trading_signals(ticker):
    df = pdr.get_data_yahoo(ticker, start=start, end=end)
    
    df_daily_close = df[['Adj Close']] 
    df_daily_pct_c = df_daily_close.pct_change()
    df_daily_pct_c.fillna(0, inplace=True)
    
    df_daily_pct_c = df_daily_close / df_daily_close.shift(1) - 1
    df['Daily_S_RoR'] = df_daily_pct_c['Adj Close']
    
    # LOG Rate Of Return
    df_daily_log_returns = np.log(df_daily_close.pct_change()+1)
    df_daily_log_returns.head()
    df['Daily_Log'] = df_daily_log_returns['Adj Close']
    
    # Total Return
    df_cum_daily_return = (1 + df_daily_pct_c).cumprod()
    df['Total_RoR'] = df_cum_daily_return['Adj Close']
    df.rename(columns={'Adj Close': ticker}, inplace=True)
    
    short_window = 12
    long_window = 26
    signals = pd.DataFrame(index=df.index)                   # Initialize the `signals` DataFrame with the `signal` column
    signals['signal'] = 0.0                                     # Create short simple moving average over the short window
    signals['short_mavg'] = df['Close'].rolling(window=short_window,min_periods=1,center=False).mean()
    signals['long_mavg'] = df['Close'].rolling(window=long_window, min_periods=1, center=False).mean()
    signals['signal'][short_window:] = np.where(signals['short_mavg'][short_window:]> signals['long_mavg'][short_window:],
                                                1.0, 0.0)
    signals['positions'] = signals['signal'].diff()              # Generate trading orders
    print('')
    ############################################################
    fig = plt.figure(figsize=(15, 11))                                      # Initialize the plot figure
    ax1 = fig.add_subplot(111,  ylabel='Price in $')                        # Add a subplot and label for y-axis
    df['Close'].plot(ax=ax1, lw=2.)                                      # Plot the closing price
    signals[['short_mavg', 'long_mavg']].plot(ax=ax1, lw=2.)                # Plot the short and long moving averages
    ax1.plot(signals.loc[signals.positions == 1.0].index, 
             signals.short_mavg[signals.positions == 1.0],'^', markersize=15, color='k')
    ax1.plot(signals.loc[signals.positions == -1.0].index,                   # Plot the sell signals
             signals.short_mavg[signals.positions == -1.0],'v', markersize=15, color='r')
    ax1.set_title(ticker+' - Moving Average Trade Signals SHORT-TERM')
    plt.grid(which="major", color='k', linestyle='-.', linewidth=0.5)
    sns.set(style='darkgrid', context='talk', palette='Dark2')
    plt.show()

def MT_Trading_signals(ticker):
    df = pdr.get_data_yahoo(ticker, start=start, end=end)
    
    df_daily_close = df[['Adj Close']]
    df_daily_pct_c = df_daily_close.pct_change()
    df_daily_pct_c.fillna(0, inplace=True)
    
    df_daily_pct_c = df_daily_close / df_daily_close.shift(1) - 1
    df['Daily_S_RoR'] = df_daily_pct_c['Adj Close']
    
    # LOG Rate Of Return
    df_daily_log_returns = np.log(df_daily_close.pct_change()+1)
    df_daily_log_returns.head()
    df['Daily_Log'] = df_daily_log_returns['Adj Close']
    
    # Total Return
    df_cum_daily_return = (1 + df_daily_pct_c).cumprod()
    df['Total_RoR'] = df_cum_daily_return['Adj Close']
    df.rename(columns={'Adj Close': ticker}, inplace=True)
    
    short_window = 20
    long_window = 50
    signals = pd.DataFrame(index=df.index)                   # Initialize the `signals` DataFrame with the `signal` column
    signals['signal'] = 0.0                                     # Create short simple moving average over the short window
    signals['short_mavg'] = df['Close'].rolling(window=short_window,min_periods=1,center=False).mean()
    signals['long_mavg'] = df['Close'].rolling(window=long_window, min_periods=1, center=False).mean()
    signals['signal'][short_window:] = np.where(signals['short_mavg'][short_window:]> signals['long_mavg'][short_window:],
                                                1.0, 0.0)
    signals['positions'] = signals['signal'].diff()              # Generate trading orders
    print('')
    ############################################################
    fig = plt.figure(figsize=(15, 11))                                      # Initialize the plot figure
    ax1 = fig.add_subplot(111,  ylabel='Price in $')                        # Add a subplot and label for y-axis
    df['Close'].plot(ax=ax1, lw=2.)                                      # Plot the closing price
    signals[['short_mavg', 'long_mavg']].plot(ax=ax1, lw=2.)                # Plot the short and long moving averages
    ax1.plot(signals.loc[signals.positions == 1.0].index, 
             signals.short_mavg[signals.positions == 1.0],'^', markersize=15, color='k')
    ax1.plot(signals.loc[signals.positions == -1.0].index,                   # Plot the sell signals
             signals.short_mavg[signals.positions == -1.0],'v', markersize=15, color='r')
    ax1.set_title(ticker+' - Moving Average Trade Signals MID-TERM')
    plt.grid(which="major", color='k', linestyle='-.', linewidth=0.5)
    sns.set(style='darkgrid', context='talk', palette='Dark2')
    plt.show()

def LT_Trading_signals(ticker):
    df = pdr.get_data_yahoo(ticker, start=start, end=end)
    
    df_daily_close = df[['Adj Close']]
    df_daily_pct_c = df_daily_close.pct_change()
    df_daily_pct_c.fillna(0, inplace=True)
    
    df_daily_pct_c = df_daily_close / df_daily_close.shift(1) - 1
    df['Daily_S_RoR'] = df_daily_pct_c['Adj Close']
    
    # LOG Rate Of Return
    df_daily_log_returns = np.log(df_daily_close.pct_change()+1)
    df_daily_log_returns.head()
    df['Daily_Log'] = df_daily_log_returns['Adj Close']
    
    # Total Return
    df_cum_daily_return = (1 + df_daily_pct_c).cumprod()
    df['Total_RoR'] = df_cum_daily_return['Adj Close']
    df.rename(columns={'Adj Close': ticker}, inplace=True)
    
    short_window = 50
    long_window = 200
    signals = pd.DataFrame(index=df.index)                   # Initialize the `signals` DataFrame with the `signal` column
    signals['signal'] = 0.0                                     # Create short simple moving average over the short window
    signals['short_mavg'] = df['Close'].rolling(window=short_window,min_periods=1,center=False).mean()
    signals['long_mavg'] = df['Close'].rolling(window=long_window, min_periods=1, center=False).mean()
    signals['signal'][short_window:] = np.where(signals['short_mavg'][short_window:]> signals['long_mavg'][short_window:],
                                                1.0, 0.0)
    signals['positions'] = signals['signal'].diff()              # Generate trading orders
    print('')
    ############################################################
    fig = plt.figure(figsize=(15, 11))                                      # Initialize the plot figure
    ax1 = fig.add_subplot(111,  ylabel='Price in $')                        # Add a subplot and label for y-axis
    df['Close'].plot(ax=ax1, lw=2.)                                      # Plot the closing price
    signals[['short_mavg', 'long_mavg']].plot(ax=ax1, lw=2.)                # Plot the short and long moving averages
    ax1.plot(signals.loc[signals.positions == 1.0].index, 
             signals.short_mavg[signals.positions == 1.0],'^', markersize=15, color='k')
    ax1.plot(signals.loc[signals.positions == -1.0].index,                   # Plot the sell signals
             signals.short_mavg[signals.positions == -1.0],'v', markersize=15, color='r')
    ax1.set_title(ticker+' - Moving Average Trade Signals LONG-TERM')
    plt.grid(which="major", color='k', linestyle='-.', linewidth=0.5)
    sns.set(style='darkgrid', context='talk', palette='Dark2')
    plt.show()

start = datetime(2019, 6, 12)
end = datetime.now()

#ticker = input('Enter Ticker: ')
tickers = ['TTD','AMZN','AAPL','GOOGL','FB','MSFT','NFLX','TSLA','AMKR','TW','BIIB','AAWW','ABBV','INVA']

# get list of S&P 500 tickers
sp = tickers_sp500()
sp.remove('BF.B')
sp.remove('BRK.B')
ticks = sp[:10]
#ticks

### SINGLE TICKER

ST_Trading_signals(ticker)
MT_Trading_signals(ticker)
LT_Trading_signals(ticker)

### TICKERS LIST

for ticker in tickers:
    ST_Trading_signals(ticker)
    MT_Trading_signals(ticker)
    LT_Trading_signals(ticker)

### TICKS LIST

for tick in ticks:
#    ST_Trading_signals(tick)
#    MT_Trading_signals(tick)
#    LT_Trading_signals(tick)

### S&P 500 LIST

for s in sp:
    ST_Trading_signals(s)