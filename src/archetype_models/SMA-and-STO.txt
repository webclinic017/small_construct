###########################################################################
# Stock Technical Analysis with Python                                    #
# Simple Moving Average SMA(5) and Stochastic Oscillator Full STO(14,3,3) #
# (c) Diego Fernandez Garcia 2015-2017                                    #
# www.exfinsis.com                                                        #
###########################################################################

# 1. Packages and Data

# Packages Importing
import numpy as np
import pandas as pd
# import pandas_datareader.data as web
import matplotlib.pyplot as plt
import talib as ta

# Data Downloading or Reading

# Google Finance
# No Adjusted Close Prices
# spy = web.DataReader('SPY', 'google', '2016-01-01', '2017-01-01')
# spy['Adj Close'] = spy['Close']

# Yahoo Finance
# spy = web.DataReader('SPY', 'yahoo', '2016-01-01', '2017-01-01')

# Data Reading
spy = pd.read_csv("Data//Stock-Technical-Analysis-Data.txt", index_col='Date', parse_dates=True)

##########

# 2. Simple Moving Average SMA(5) and Stochastic Oscillator Full STO(14,3,3) Calculation and Chart
# Technical Indicators Calculation
spy['sma5'] = ta.SMA(np.asarray(spy['Close']), 5)
spy['slowk'], spy['slowd'] = ta.STOCH(np.asarray(spy['High']), np.asarray(spy['Low']), np.asarray(spy['Close']),
                                     fastk_period=14, slowk_period=3, slowk_matype=0, slowd_period=3, slowd_matype=0)
# Technical Indicators Chart
fig1, ax = plt.subplots(2, sharex=True)
ax[0].plot(spy['Close'])
ax[0].plot(spy['sma5'])
ax[0].legend(loc='upper left')
ax[1].plot(spy['slowk'], color='red', linestyle='--')
ax[1].plot(spy['slowd'], color='green')
ax[1].legend(loc='upper left')
plt.suptitle('SPY Close Prices, Simple Moving Average SMA(5) & Stochastic Oscillator Full STO(14,3,3)')
plt.show()

##########

# 3. Price and Bands Crossover Trading Signals
# Previous Periods Data (avoid backtesting bias)
spy['Close(-1)'] = spy['Close'].shift(1)
spy['sma5(-1)'] = spy['sma5'].shift(1)
spy['slowd(-1)'] = spy['slowd'].shift(1)
spy['Close(-2)'] = spy['Close'].shift(2)
spy['sma5(-2)'] = spy['sma5'].shift(2)
# Generate Trading Signals (buy=1 , sell=-1, do nothing=0)
spy['stosmasig'] = 0
stosmasig = 0
for i, r in enumerate(spy.iterrows()):
    if r[1]['Close(-2)'] < r[1]['sma5(-2)'] and r[1]['Close(-1)'] > r[1]['sma5(-1)'] and r[1]['slowd(-1)'] < 20:
        stosmasig = 1
    elif r[1]['Close(-2)'] > r[1]['sma5(-2)'] and r[1]['Close(-1)'] < r[1]['sma5(-1)'] and r[1]['slowd(-1)'] > 80:
        stosmasig = -1
    else:
        stosmasig = 0
    spy.iloc[i, 14] = stosmasig
# Trading Signals Chart
fig2, ax = plt.subplots(3, sharex=True)
ax[0].plot(spy['Close'])
ax[0].plot(spy['sma5'])
ax[0].legend(loc='upper left')
ax[1].plot(spy['slowk'], color='red', linestyle='--')
ax[1].plot(spy['slowd'], color='green')
ax[1].legend(loc='upper left')
ax[2].plot(spy['stosmasig'], marker='o', linestyle='')
ax[2].legend(loc='upper left')
plt.suptitle('SPY Close Prices, Simple Moving Average SMA(5) & Stochastic Oscillator Full STO(14,3,3)')
plt.show()

##########

# 4. Price and Bands Crossover Trading Strategy
# Generate Trading Strategy (own stock=1 , not own stock=0, short-selling not available)
spy['stosmastr'] = 1
stosmastr = 0
for i, r in enumerate(spy.iterrows()):
    if r[1]['stosmasig'] == 1:
        stosmastr = 1
    elif r[1]['stosmasig'] == -1:
        stosmastr = 0
    else:
        stosmastr = spy['stosmastr'][i-1]
    spy.iloc[i, 15] = stosmastr
# Trading Strategy Chart
fig2, ax = plt.subplots(3, sharex=True)
ax[0].plot(spy['Close'])
ax[0].plot(spy['sma5'])
ax[0].legend(loc='upper left')
ax[1].plot(spy['slowk'], color='red', linestyle='--')
ax[1].plot(spy['slowd'], color='green')
ax[1].legend(loc='upper left')
ax[2].plot(spy['stosmastr'], marker='o', linestyle='')
ax[2].legend(loc='upper left')
plt.suptitle('SPY Close Prices, Simple Moving Average SMA(5) & Stochastic Oscillator Full STO(14,3,3)')
plt.show()

##########

# 5. Price and Bands Crossover Strategy Performance Comparison

# 5.1. Strategies Daily Returns
# Price and Bands Crossover Strategy Without Trading Commissions
spy['stosmadrt'] = ((spy['Close']/spy['Close'].shift(1))-1)*spy['stosmastr']
spy.iloc[0, 16] = 0
# Price and Bands Crossover Strategy With Trading Commissions (1% Per Trade)
spy['stosmastr(-1)'] = spy['stosmastr'].shift(1)
spy['stosmatc'] = spy['stosmasig']
stosmatc = 0
for i, r in enumerate(spy.iterrows()):
    if (r[1]['stosmasig'] == 1 or r[1]['stosmasig'] == -1) and r[1]['stosmastr'] != r[1]['stosmastr(-1)']:
        stosmatc = 0.01
    else:
        stosmatc = 0.00
    spy.iloc[i, 18] = stosmatc
spy['stosmadrtc'] = (((spy['Close']/spy['Close'].shift(1))-1)-spy['stosmatc'])*spy['stosmastr']
spy.iloc[0, 19] = 0
# Buy and Hold Strategy
spy['bhdrt'] = (spy['Close']/spy['Close'].shift(1))-1
spy.iloc[0, 20] = 0

# 5.2. Strategies Cumulative Returns
# Cumulative Returns Calculation
spy['stosmacrt'] = np.cumprod(spy['stosmadrt']+1)-1
spy['stosmacrtc'] = np.cumprod(spy['stosmadrtc']+1)-1
spy['bhcrt'] = np.cumprod(spy['bhdrt']+1)-1
# Cumulative Returns Chart
spy.plot(y=['stosmacrt', 'stosmacrtc', 'bhcrt'])
plt.title('Simple Moving Average SMA(5) & Stochastic Oscillator Full STO(14,3,3) vs Buy & Hold')
plt.legend(loc='upper left')
plt.show()

# 5.3. Strategies Performance Metrics
# Annualized Returns
stosmayrt = spy.iloc[251, 21]
stosmayrtc = spy.iloc[251, 22]
bhyrt = spy.iloc[251, 23]
# Annualized Standard Deviation
stosmastd = np.std(spy['stosmadrt'])*np.sqrt(252)
stosmastdc = np.std(spy['stosmadrtc'])*np.sqrt(252)
bhstd = np.std(spy['bhdrt'])*np.sqrt(252)
# Annualized Sharpe Ratio
stosmasr = stosmayrt/stosmastd
stosmasrc = stosmayrtc/stosmastdc
bhsr = bhyrt/bhstd
# Summary Results Data Table
data = [{'0': '', '1': 'SMA(5) &', '2': 'SMA(5) &', '3': 'B&H'},
        {'0': '', '1': 'STO(14,3,3)', '2': 'STO(14,3,3)TC', '3': ''},
        {'0': 'Annualized Return', '1': stosmayrt, '2': stosmayrtc, '3': bhyrt},
        {'0': 'Annualized Standard Deviation', '1': stosmastd, '2': stosmastdc, '3': bhstd},
        {'0': 'Annualized Sharpe Ratio (Rf=0%)', '1': stosmasr, '2': stosmasrc, '3': bhsr}]
table = pd.DataFrame(data)
print(spy)
print(table)