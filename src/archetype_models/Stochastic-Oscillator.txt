######################################################
# Stock Technical Analysis with Python               #
# Stochastic Oscillator Full STO(14,3,3)             #
# (c) Diego Fernandez Garcia 2015-2017               #
# www.exfinsis.com                                   #
######################################################

# 1. Packages and Data

# Packages Importing
import numpy as np
import pandas as pd
# import pandas_datareader.data as web
import matplotlib.pyplot as plt
import talib as ta

# Data Downloading or Reading

# Google Finance
# No Adjusted Close Prices
# spy = web.DataReader('SPY', 'google', '2016-01-01', '2017-01-01')
# spy['Adj Close'] = spy['Close']

# Yahoo Finance
# spy = web.DataReader('SPY', 'yahoo', '2016-01-01', '2017-01-01')

# Data Reading
spy = pd.read_csv("Data//Stock-Technical-Analysis-Data.txt", index_col='Date', parse_dates=True)

##########

# 2. Stochastic Oscillator Full STO(14,3,3) Calculation and Chart
# Technical Indicator Calculation
spy['slowk'], spy['slowd'] = ta.STOCH(np.asarray(spy['High']), np.asarray(spy['Low']), np.asarray(spy['Close']),
                                     fastk_period=14, slowk_period=3, slowk_matype=0, slowd_period=3, slowd_matype=0)
# Technical Indicator Chart
fig1, ax = plt.subplots(2, sharex=True)
ax[0].plot(spy['Close'])
ax[0].legend(loc='upper left')
ax[1].plot(spy['slowk'], color='red', linestyle='--')
ax[1].plot(spy['slowd'], color='green')
ax[1].legend(loc='upper left')
plt.suptitle('SPY Close Prices & Stochastic Oscillator Full STO(14,3,3)')
plt.show()

##########

# 3. Bands Crossover Trading Signals
# Previous Periods Data (avoid backtesting bias)
spy['slowd(-1)'] = spy['slowd'].shift(1)
spy['slowd(-2)'] = spy['slowd'].shift(2)
# Generate Trading Signals (buy=1 , sell=-1, do nothing=0)
spy['stosig'] = 0
stosig = 0
for i, r in enumerate(spy.iterrows()):
    if r[1]['slowd(-2)'] < 20 and r[1]['slowd(-1)'] > 20:
        stosig = 1
    elif r[1]['slowd(-2)'] < 80 and r[1]['slowd(-1)'] > 80:
        stosig = -1
    else:
        stosig = 0
    spy.iloc[i, 10] = stosig
# Trading Signals Chart
fig2, ax = plt.subplots(3, sharex=True)
ax[0].plot(spy['Close'])
ax[0].legend(loc='upper left')
ax[1].plot(spy['slowk'], color='red', linestyle='--')
ax[1].plot(spy['slowd'], color='green')
ax[1].legend(loc='upper left')
ax[2].plot(spy['stosig'], marker='o', linestyle='')
ax[2].legend(loc='upper left')
plt.suptitle('SPY Close Prices & Stochastic Oscillator Full STO(14,3,3)')
plt.show()

##########

# 4. Bands Crossover Trading Strategy
# Generate Trading Strategy (own stock=1 , not own stock=0, short-selling not available)
spy['stostr'] = 1
stostr = 0
for i, r in enumerate(spy.iterrows()):
    if r[1]['stosig'] == 1:
        stostr = 1
    elif r[1]['stosig'] == -1:
        stostr = 0
    else:
        stostr = spy['stostr'][i-1]
    spy.iloc[i, 11] = stostr
# Trading Strategy Chart
fig3, ax = plt.subplots(3, sharex=True)
ax[0].plot(spy['Close'])
ax[0].legend(loc='upper left')
ax[1].plot(spy['slowk'], color='red', linestyle='--')
ax[1].plot(spy['slowd'], color='green')
ax[1].legend(loc='upper left')
ax[2].plot(spy['stostr'], marker='o', linestyle='')
ax[2].legend(loc='upper left')
plt.suptitle('SPY Close Prices & Stochastic Oscillator Full STO(14,3,3)')
plt.show()

##########

# 5. Bands Crossover Strategy Performance Comparison

# 5.1. Strategies Daily Returns
# Price Crossover Strategy Without Trading Commissions
spy['stodrt'] = ((spy['Close']/spy['Close'].shift(1))-1)*spy['stostr']
spy.iloc[0, 12] = 0
# Price Crossover Strategy With Trading Commissions (1% Per Trade)
spy['stostr(-1)'] = spy['stostr'].shift(1)
spy['stotc'] = spy['stosig']
stotc = 0
for i, r in enumerate(spy.iterrows()):
    if (r[1]['stosig'] == 1 or r[1]['stosig'] == -1) and r[1]['stostr'] != r[1]['stostr(-1)']:
        stotc = 0.01
    else:
        stotc = 0.00
    spy.iloc[i, 14] = stotc
spy['stodrtc'] = (((spy['Close']/spy['Close'].shift(1))-1)-spy['stotc'])*spy['stostr']
spy.iloc[0, 15] = 0
# Buy and Hold Strategy
spy['bhdrt'] = (spy['Close']/spy['Close'].shift(1))-1
spy.iloc[0, 16] = 0

# 5.2. Strategies Cumulative Returns
# Cumulative Returns Calculation
spy['stocrt'] = np.cumprod(spy['stodrt']+1)-1
spy['stocrtc'] = np.cumprod(spy['stodrtc']+1)-1
spy['bhcrt'] = np.cumprod(spy['bhdrt']+1)-1
# Cumulative Returns Chart
spy.plot(y=['stocrt', 'stocrtc', 'bhcrt'])
plt.title('Stochastic Oscillator Full STO(14,3,3) vs Buy & Hold')
plt.legend(loc='upper left')
plt.show()

# 5.3. Strategies Performance Metrics
# Annualized Returns
stoyrt = spy.iloc[251, 17]
stoyrtc = spy.iloc[251, 18]
bhyrt = spy.iloc[251, 19]
# Annualized Standard Deviation
stostd = np.std(spy['stodrt'])*np.sqrt(252)
stostdc = np.std(spy['stodrtc'])*np.sqrt(252)
bhstd = np.std(spy['bhdrt'])*np.sqrt(252)
# Annualized Sharpe Ratio
stosr = stoyrt/stostd
stosrc = stoyrtc/stostdc
bhsr = bhyrt/bhstd
# Summary Results Data Table
data = [{'0': '', '1': 'STO(14,3,3)', '2': 'STO(14,3,3)TC', '3': 'B&H'},
        {'0': 'Annualized Return', '1': stoyrt, '2': stoyrtc, '3': bhyrt},
        {'0': 'Annualized Standard Deviation', '1': stostd, '2': stostdc, '3': bhstd},
        {'0': 'Annualized Sharpe Ratio (Rf=0%)', '1': stosr, '2': stosrc, '3': bhsr}]
table = pd.DataFrame(data)
print(spy)
print(table)