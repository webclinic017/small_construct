###########################################################
# Stock Technical Analysis with Python                    #
# Simple Moving Average SMA(5) and Rate of Change ROC(21) #
# (c) Diego Fernandez Garcia 2015-2017                    #
# www.exfinsis.com                                        #
###########################################################

# 1. Packages and Data

# Packages Importing
import numpy as np
import pandas as pd
# import pandas_datareader.data as web
import matplotlib.pyplot as plt
import talib as ta

# Data Downloading or Reading

# Google Finance
# No Adjusted Close Prices
# spy = web.DataReader('SPY', 'google', '2016-01-01', '2017-01-01')
# spy['Adj Close'] = spy['Close']

# Yahoo Finance
# spy = web.DataReader('SPY', 'yahoo', '2016-01-01', '2017-01-01')

# Data Reading
spy = pd.read_csv("Data//Stock-Technical-Analysis-Data.txt", index_col='Date', parse_dates=True)

##########

# 2. Simple Moving Average SMA(5) and Rate of Change ROC(21) Calculation and Chart
# Technical Indicators Calculation
spy['sma5'] = ta.SMA(np.asarray(spy['Close']), 5)
spy['roc'] = ta.ROC(np.asarray(spy['Close']), timeperiod=21)
# Technical Indicators Chart
fig1, ax = plt.subplots(2, sharex=True)
ax[0].plot(spy['Close'])
ax[0].plot(spy['sma5'])
ax[0].legend(loc='upper left')
ax[1].plot(spy['roc'], color='green')
ax[1].legend(loc='upper left')
plt.suptitle('SPY Close Prices, Simple Moving Average SMA(5) & Rate of Change ROC(21)')
plt.show()

##########

# 3. Price and Bands Crossover Trading Signals
# Previous Periods Data (avoid backtesting bias)
spy['Close(-1)'] = spy['Close'].shift(1)
spy['sma5(-1)'] = spy['sma5'].shift(1)
spy['roc(-1)'] = spy['roc'].shift(1)
spy['Close(-2)'] = spy['Close'].shift(2)
spy['sma5(-2)'] = spy['sma5'].shift(2)
# Generate Trading Signals (buy=1 , sell=-1, do nothing=0)
spy['rocsmasig'] = 0
rocsmasig = 0
for i, r in enumerate(spy.iterrows()):
    if r[1]['Close(-2)'] < r[1]['sma5(-2)'] and r[1]['Close(-1)'] > r[1]['sma5(-1)'] and r[1]['roc(-1)'] < -10:
        rocsmasig = 1
    elif r[1]['Close(-2)'] > r[1]['sma5(-2)'] and r[1]['Close(-1)'] < r[1]['sma5(-1)'] and r[1]['roc(-1)'] > 10:
        rocsmasig = -1
    else:
        rocsmasig = 0
    spy.iloc[i, 13] = rocsmasig
# Trading Signals Chart
fig2, ax = plt.subplots(3, sharex=True)
ax[0].plot(spy['Close'])
ax[0].plot(spy['sma5'])
ax[0].legend(loc='upper left')
ax[1].plot(spy['roc'], color='green')
ax[1].legend(loc='upper left')
ax[2].plot(spy['rocsmasig'], marker='o', linestyle='')
ax[2].legend(loc='upper left')
plt.suptitle('SPY Close Prices, Simple Moving Average SMA(5) & Rate of Change ROC(21)')
plt.show()

##########

# 4. Price and Bands Crossover Trading Strategy
# Generate Trading Strategy (own stock=1 , not own stock=0, short-selling not available)
spy['rocsmastr'] = 1
rocsmastr = 0
for i, r in enumerate(spy.iterrows()):
    if r[1]['rocsmasig'] == 1:
        rocsmastr = 1
    elif r[1]['rocsmasig'] == -1:
        rocsmastr = 0
    else:
        rocsmastr = spy['rocsmastr'][i-1]
    spy.iloc[i, 14] = rocsmastr
# Trading Strategy Chart
fig3, ax = plt.subplots(3, sharex=True)
ax[0].plot(spy['Close'])
ax[0].plot(spy['sma5'])
ax[0].legend(loc='upper left')
ax[1].plot(spy['roc'], color='green')
ax[1].legend(loc='upper left')
ax[2].plot(spy['rocsmastr'], marker='o', linestyle='')
ax[2].legend(loc='upper left')
plt.suptitle('SPY Close Prices, Simple Moving Average SMA(5) & Rate of Change ROC(21)')
plt.show()

##########

# 5. Price and Bands Crossover Strategy Performance Comparison

# 5.1. Strategies Daily Returns
# Price and Bands Crossover Strategy Without Trading Commissions
spy['rocsmadrt'] = ((spy['Close']/spy['Close'].shift(1))-1)*spy['rocsmastr']
spy.iloc[0, 15] = 0
# Price Crossover Strategy With Trading Commissions (1% Per Trade)
spy['rocsmastr(-1)'] = spy['rocsmastr'].shift(1)
spy['rocsmatc'] = spy['rocsmasig']
rocsmatc = 0
for i, r in enumerate(spy.iterrows()):
    if (r[1]['rocsmasig'] == 1 or r[1]['rocsmasig'] == -1) and r[1]['rocsmastr'] != r[1]['rocsmastr(-1)']:
        rocsmatc = 0.01
    else:
        rocsmatc = 0.00
    spy.iloc[i, 17] = rocsmatc
spy['rocsmadrtc'] = (((spy['Close']/spy['Close'].shift(1))-1)-spy['rocsmatc'])*spy['rocsmastr']
spy.iloc[0, 18] = 0
# Buy and Hold Strategy
spy['bhdrt'] = (spy['Close']/spy['Close'].shift(1))-1
spy.iloc[0, 19] = 0

# 5.2. Strategies Cumulative Returns
# Cumulative Returns Calculation
spy['rocsmacrt'] = np.cumprod(spy['rocsmadrt']+1)-1
spy['rocsmacrtc'] = np.cumprod(spy['rocsmadrtc']+1)-1
spy['bhcrt'] = np.cumprod(spy['bhdrt']+1)-1
# Cumulative Returns Chart
spy.plot(y=['rocsmacrt', 'rocsmacrtc', 'bhcrt'])
plt.title('Simple Moving Average SMA(5) & Rate of Change ROC(21) vs Buy & Hold')
plt.legend(loc='upper left')
plt.show()

# 5.3. Strategies Performance Metrics
# Annualized Returns
rocsmayrt = spy.iloc[251, 20]
rocsmayrtc = spy.iloc[251, 21]
bhyrt = spy.iloc[251, 22]
# Annualized Standard Deviation
rocsmastd = np.std(spy['rocsmadrt'])*np.sqrt(252)
rocsmastdc = np.std(spy['rocsmadrtc'])*np.sqrt(252)
bhstd = np.std(spy['bhdrt'])*np.sqrt(252)
# Annualized Sharpe Ratio
rocsmasr = rocsmayrt/rocsmastd
rocsmasrc = rocsmayrtc/rocsmastdc
bhsr = bhyrt/bhstd
# Summary Results Data Table
data = [{'0': '', '1': 'SMA(5) &', '2': 'SMA(5) &', '3': 'B&H'},
        {'0': '', '1': 'ROC(21)', '2': 'ROC(21)TC', '3': ''},
        {'0': 'Annualized Return', '1': rocsmayrt, '2': rocsmayrtc, '3': bhyrt},
        {'0': 'Annualized Standard Deviation', '1': rocsmastd, '2': rocsmastdc, '3': bhstd},
        {'0': 'Annualized Sharpe Ratio (Rf=0%)', '1': rocsmasr, '2': rocsmasrc, '3': bhsr}]
table = pd.DataFrame(data)
print(spy)
print(table)