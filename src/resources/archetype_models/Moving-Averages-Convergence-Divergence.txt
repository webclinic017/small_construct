########################################################
# Stock Technical Analysis with Python                 #
# Moving Averages Convergence Divergence MACD(12,26,9) #
# (c) Diego Fernandez Garcia 2015-2017                 #
# www.exfinsis.com                                     #
########################################################

# 1. Packages and Data

# Packages Importing
import numpy as np
import pandas as pd
# import pandas_datareader.data as web
import matplotlib.pyplot as plt
import talib as ta

# Data Downloading or Reading

# Google Finance
# No Adjusted Close Prices
# spy = web.DataReader('SPY', 'google', '2016-01-01', '2017-01-01')
# spy['Adj Close'] = spy['Close']

# Yahoo Finance
# spy = web.DataReader('SPY', 'yahoo', '2016-01-01', '2017-01-01')

# Data Reading
spy = pd.read_csv("Data//Stock-Technical-Analysis-Data.txt", index_col='Date', parse_dates=True)

##########

# 2. Moving Averages Convergence Divergence MACD(12,26,9) Calculation and Chart

# Technical Indicator Calculation
spy['macd'], spy['macdema'], spy['macdhist'] = ta.MACD(np.asarray(spy['Close']),
                                                      fastperiod=12, slowperiod=26, signalperiod=9)
# Technical Indicator Chart
fig1, ax = plt.subplots(2, sharex=True)
ax[0].plot(spy['Close'])
ax[0].legend(loc='upper left')
ax[1].plot(spy['macd'])
ax[1].plot(spy['macdema'])
ax[1].plot(spy['macdhist'], linestyle='--')
ax[1].legend(loc='upper left')
plt.suptitle('SPY Close Prices & Moving Averages Convergence Divergence MACD(12,26,9)')
plt.show()

##########

# 3. Signal Crossover Trading Signals
# Previous Periods Data (avoid backtesting bias)
spy['macd(-1)'] = spy['macd'].shift(1)
spy['macdema(-1)'] = spy['macdema'].shift(1)
spy['macd(-2)'] = spy['macd'].shift(2)
spy['macdema(-2)'] = spy['macdema'].shift(2)
# Generate Trading Signals (buy=1 , sell=-1, do nothing=0)
spy['macdsig'] = 0
macdsig = 0
for i, r in enumerate(spy.iterrows()):
    if r[1]['macd(-2)'] < r[1]['macdema(-2)'] and r[1]['macd(-1)'] > r[1]['macdema(-1)']:
        macdsig = 1
    elif r[1]['macd(-2)'] > r[1]['macdema(-2)'] and r[1]['macd(-1)'] < r[1]['macdema(-1)']:
        macdsig = -1
    else:
        macdsig = 0
    spy.iloc[i, 13] = macdsig
# Trading Strategy Chart
fig2, ax = plt.subplots(3, sharex=True)
ax[0].plot(spy['Close'])
ax[0].legend(loc='upper left')
ax[1].plot(spy['macd'])
ax[1].plot(spy['macdema'])
ax[1].plot(spy['macdhist'], linestyle='--')
ax[1].legend(loc='upper left')
ax[2].plot(spy['macdsig'], marker='o', linestyle='')
ax[2].legend(loc='upper left')
plt.suptitle('SPY Close Prices & Moving Averages Convergence Divergence MACD(12,26,9)')
plt.show()

##########

# 4. Signal Crossover Trading Strategy
# Generate Trading Strategy (own stock=1 , not own stock=0, short-selling not available)
spy['macdstr'] = 1
macdstr = 0
for i, r in enumerate(spy.iterrows()):
    if r[1]['macdsig'] == 1:
        macdstr = 1
    elif r[1]['macdsig'] == -1:
        macdstr = 0
    else:
        macdstr = spy['macdstr'][i-1]
    spy.iloc[i, 14] = macdstr
# Trading Strategy Chart
fig3, ax = plt.subplots(3, sharex=True)
ax[0].plot(spy['Close'])
ax[0].legend(loc='upper left')
ax[1].plot(spy['macd'])
ax[1].plot(spy['macdema'])
ax[1].plot(spy['macdhist'], linestyle='--')
ax[1].legend(loc='upper left')
ax[2].plot(spy['macdstr'], marker='o', linestyle='')
ax[2].legend(loc='upper left')
plt.suptitle('SPY Close Prices & Moving Averages Convergence Divergence MACD(12,26,9)')
plt.show()

##########

# 5. Signal Crossover Strategy Performance Comparison

# 5.1. Strategies Daily Returns
# Signal Crossover Strategy Without Trading Commissions
spy['macddrt'] = ((spy['Close']/spy['Close'].shift(1))-1)*spy['macdstr']
spy.iloc[0, 15] = 0
# Price Crossover Strategy With Trading Commissions (1% Per Trade)
spy['macdstr(-1)'] = spy['macdstr'].shift(1)
spy['macdtc'] = spy['macdsig']
macdtc = 0
for i, r in enumerate(spy.iterrows()):
    if (r[1]['macdsig'] == 1 or r[1]['macdsig'] == -1) and r[1]['macdstr'] != r[1]['macdstr(-1)']:
        macdtc = 0.01
    else:
        macdtc = 0.00
    spy.iloc[i, 17] = macdtc
spy['macddrtc'] = (((spy['Close']/spy['Close'].shift(1))-1)-spy['macdtc'])*spy['macdstr']
spy.iloc[0, 18] = 0
# Buy and Hold Strategy
spy['bhdrt'] = (spy['Close']/spy['Close'].shift(1))-1
spy.iloc[0, 19] = 0

# 5.2. Strategies Cumulative Returns
# Cumulative Returns Calculation
spy['macdcrt'] = np.cumprod(spy['macddrt']+1)-1
spy['macdcrtc'] = np.cumprod(spy['macddrtc']+1)-1
spy['bhcrt'] = np.cumprod(spy['bhdrt']+1)-1
# Cumulative Returns Chart
spy.plot(y=['macdcrt', 'macdcrtc', 'bhcrt'])
plt.title('Moving Averages Convergence Divergence MACD(12,26,9) vs Buy & Hold')
plt.legend(loc='upper left')
plt.show()

# 5.3. Strategies Performance Metrics
# Annualized Returns
macdyrt = spy.iloc[251, 20]
macdyrtc = spy.iloc[251, 21]
bhyrt = spy.iloc[251, 22]
# Annualized Standard Deviation
macdstd = np.std(spy['macddrt'])*np.sqrt(252)
macdstdc = np.std(spy['macddrtc'])*np.sqrt(252)
bhstd = np.std(spy['bhdrt'])*np.sqrt(252)
# Annualized Sharpe Ratio
macdsr = macdyrt/macdstd
macdsrc = macdyrtc/macdstdc
bhsr = bhyrt/bhstd
# Summary Results Data Table
data = [{'0': '', '1': 'MACD(12,26,9)', '2': 'MACD(12,26,9)TC', '3': 'B&H'},
        {'0': 'Annualized Return', '1': macdyrt, '2': macdyrtc, '3': bhyrt},
        {'0': 'Annualized Standard Deviation', '1': macdstd, '2': macdstdc, '3': bhstd},
        {'0': 'Annualized Sharpe Ratio (Rf=0%)', '1': macdsr, '2': macdsrc, '3': bhsr}]
table = pd.DataFrame(data)
print(spy)
print(table)
