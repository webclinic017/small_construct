######################################################
# Stock Technical Analysis with Python               #
# Commodity Channel Index CCI(20,0.015)              #
# (c) Diego Fernandez Garcia 2015-2017               #
# www.exfinsis.com                                   #
######################################################

# 1. Packages and Data

# Packages Importing
import numpy as np
import pandas as pd
# import pandas_datareader.data as web
import matplotlib.pyplot as plt
import talib as ta

# Data Downloading or Reading

# Google Finance
# No Adjusted Close Prices
# spy = web.DataReader('SPY', 'google', '2016-01-01', '2017-01-01')
# spy['Adj Close'] = spy['Close']

# Yahoo Finance
# spy = web.DataReader('SPY', 'yahoo', '2016-01-01', '2017-01-01')

# Data Reading
spy = pd.read_csv("Data//Stock-Technical-Analysis-Data.txt", index_col='Date', parse_dates=True)

##########

# 2. Commodity Channel Index CCI(20,0.015) Calculation and Chart

# Technical Indicator Calculation
spy['cci'] = ta.CCI(np.asarray(spy['High']), np.asarray(spy['Low']), np.asarray(spy['Close']), timeperiod=20)
# Technical Indicator Chart
fig1, ax = plt.subplots(2, sharex=True)
ax[0].plot(spy['Close'])
ax[0].legend(loc='upper left')
ax[1].plot(spy['cci'], color='green')
ax[1].legend(loc='upper left')
plt.suptitle('SPY Close Prices & Commodity Channel Index CCI(20,0.015)')
plt.show()

##########

# 3. Bands Crossover Trading Signals
# Previous Periods Data (avoid back-testing bias)
spy['cci(-1)'] = spy['cci'].shift(1)
spy['cci(-2)'] = spy['cci'].shift(2)
# Generate Trading Signals (buy=1 , sell=-1, do nothing=0)
spy['ccisig'] = 0
ccisig = 0
for i, r in enumerate(spy.iterrows()):
    if r[1]['cci(-2)'] < -100 and r[1]['cci(-1)'] > -100:
        ccisig = 1
    elif r[1]['cci(-2)'] < 100 and r[1]['cci(-1)'] > 100:
        ccisig = -1
    else:
        ccisig = 0
    spy.iloc[i, 9] = ccisig
# Trading Signals Chart
fig2, ax = plt.subplots(3, sharex=True)
ax[0].plot(spy['Close'])
ax[0].legend(loc='upper left')
ax[1].plot(spy['cci'], color='green')
ax[1].legend(loc='upper left')
ax[2].plot(spy['ccisig'], marker='o', linestyle='', color='orange')
ax[2].legend(loc='upper left')
plt.suptitle('SPY Close Prices & Commodity Channel Index CCI(20,0.015)')
plt.show()

##########

# 4. Bands Crossover Trading Strategy
# Generate Trading Strategy (own stock=1 , not own stock=0, short-selling not available)
spy['ccistr'] = 1
ccistr = 0
for i, r in enumerate(spy.iterrows()):
    if r[1]['ccisig'] == 1:
        ccistr = 1
    elif r[1]['ccisig'] == -1:
        ccistr = 0
    else:
        ccistr = spy['ccistr'][i-1]
    spy.iloc[i, 10] = ccistr
# Trading Strategy Chart
fig3, ax = plt.subplots(3, sharex=True)
ax[0].plot(spy['Close'])
ax[0].legend(loc='upper left')
ax[1].plot(spy['cci'], color='green')
ax[1].legend(loc='upper left')
ax[2].plot(spy['ccistr'], marker='o', linestyle='', color='orange')
ax[2].legend(loc='upper left')
plt.suptitle('SPY Close Prices & Commodity Channel Index CCI(20,0.015)')
plt.show()

##########

# 5. Bands Crossover Strategy Performance Comparison

# 5.1. Strategies Daily Returns
# Price Crossover Strategy Without Trading Commissions
spy['ccidrt'] = ((spy['Close']/spy['Close'].shift(1))-1)*spy['ccistr']
spy.iloc[0, 11] = 0
# Price Crossover Strategy With Trading Commissions (1% Per Trade)
spy['ccistr(-1)'] = spy['ccistr'].shift(1)
spy['ccitc'] = spy['ccisig']
ccitc = 0
for i, r in enumerate(spy.iterrows()):
    if (r[1]['ccisig'] == 1 or r[1]['ccisig'] == -1) and r[1]['ccistr'] != r[1]['ccistr(-1)']:
        ccitc = 0.01
    else:
        ccitc = 0.00
    spy.iloc[i, 13] = ccitc
spy['ccidrtc'] = (((spy['Close']/spy['Close'].shift(1))-1)-spy['ccitc'])*spy['ccistr']
spy.iloc[0, 14] = 0
# Buy and Hold Strategy
spy['bhdrt'] = (spy['Close']/spy['Close'].shift(1))-1
spy.iloc[0, 15] = 0

# 5.2. Strategies Cumulative Returns
# Cumulative Returns Calculation
spy['ccicrt'] = np.cumprod(spy['ccidrt']+1)-1
spy['ccicrtc'] = np.cumprod(spy['ccidrtc']+1)-1
spy['bhcrt'] = np.cumprod(spy['bhdrt']+1)-1
# Cumulative Returns Chart
spy.plot(y=['ccicrt', 'ccicrtc', 'bhcrt'])
plt.title('Commodity Channel Index CCI(20,0.015) vs Buy & Hold')
plt.legend(loc='upper left')
plt.show()

# 5.3. Strategies Performance Metric
# Annualized Returns
cciyrt = spy.iloc[251, 16]
cciyrtc = spy.iloc[251, 17]
bhyrt = spy.iloc[251, 18]
# Annualized Standard Deviation
ccistd = np.std(spy['ccidrt'])*np.sqrt(252)
ccistdc = np.std(spy['ccidrtc'])*np.sqrt(252)
bhstd = np.std(spy['bhdrt'])*np.sqrt(252)
# Annualized Sharpe Ratio
ccisr = cciyrt/ccistd
ccisrc = cciyrtc/ccistdc
bhsr = bhyrt/bhstd
# Summary Results Data Table
data = [{'0': '', '1': 'CCI(20,0.015)', '2': 'CCI(20,0.015)TC', '3': 'B&H'},
        {'0': 'Annualized Return', '1': cciyrt, '2': cciyrtc, '3': bhyrt},
        {'0': 'Annualized Standard Deviation', '1': ccistd, '2': ccistdc, '3': bhstd},
        {'0': 'Annualized Sharpe Ratio (Rf=0%)', '1': ccisr, '2': ccisrc, '3': bhsr}]
table = pd.DataFrame(data)
print(spy)
print(table)
