######################################################
# Stock Technical Analysis with Python               #
# Average Directional Movement Index ADX(14)         #
# (c) Diego Fernandez Garcia 2015-2017               #
# www.exfinsis.com                                   #
######################################################

# 1. Packages and Data

# Packages Importing
import numpy as np
import pandas as pd
# import pandas_datareader.data as web
import matplotlib.pyplot as plt
import talib as ta

# Data Downloading or Reading

# Google Finance
# No Adjusted Close Prices
# spy = web.DataReader('SPY', 'google', '2016-01-01', '2017-01-01')
# spy['Adj Close'] = spy['Close']

# Yahoo Finance
# spy = web.DataReader('SPY', 'yahoo', '2016-01-01', '2017-01-01')

# Data Reading
spy = pd.read_csv("Data//Stock-Technical-Analysis-Data.txt", index_col='Date', parse_dates=True)

##########

# 2. Average Directional Movement Index ADX(14) Calculation and Chart

# Technical Indicator Calculation
spy['adx'] = ta.ADX(np.asarray(spy['High']), np.asarray(spy['Low']), np.asarray(spy['Close']), timeperiod=14)
spy['+di'] = ta.PLUS_DI(np.asarray(spy['High']), np.asarray(spy['Low']), np.asarray(spy['Close']), timeperiod=14)
spy['-di'] = ta.MINUS_DI(np.asarray(spy['High']), np.asarray(spy['Low']), np.asarray(spy['Close']), timeperiod=14)
# Technical Indicator Chart
fig1, ax = plt.subplots(2, sharex=True)
ax[0].plot(spy['Close'])
ax[0].legend(loc='upper left')
ax[1].plot(spy['adx'])
ax[1].plot(spy['+di'])
ax[1].plot(spy['-di'])
ax[1].legend(loc='upper left')
plt.suptitle('SPY Close Prices & Average Directional Movement Index ADX(14)')
plt.show()

##########

# 3. Bands and Double Crossover Trading Signals
# Previous Periods Data (avoid back-testing bias)
spy['adx(-1)'] = spy['adx'].shift(1)
spy['+di(-1)'] = spy['+di'].shift(1)
spy['-di(-1)'] = spy['-di'].shift(1)
spy['+di(-2)'] = spy['+di'].shift(2)
spy['-di(-2)'] = spy['-di'].shift(2)
# Generate Trading Signals (buy=1 , sell=-1, do nothing=0)
spy['adxsig'] = 0
adxsig = 0
for i, r in enumerate(spy.iterrows()):
    if r[1]['+di(-2)'] < r[1]['-di(-2)'] and r[1]['+di(-1)'] > r[1]['-di(-1)'] and r[1]['adx(-1)'] > 20:
        adxsig = 1
    elif r[1]['+di(-2)'] > r[1]['-di(-2)'] and r[1]['+di(-1)'] < r[1]['-di(-1)'] and r[1]['adx(-1)'] > 20:
        adxsig = -1
    else:
        adxsig = 0
        spy.iloc[i, 14] = adxsig
# Trading Signals Chart
fig2, ax = plt.subplots(3, sharex=True)
ax[0].plot(spy['Close'])
ax[0].legend(loc='upper left')
ax[1].plot(spy['adx'])
ax[1].plot(spy['+di'])
ax[1].plot(spy['-di'])
ax[1].legend(loc='upper left')
ax[2].plot(spy['adxsig'], marker='o', linestyle='')
ax[2].legend(loc='upper left')
plt.suptitle('SPY Close Prices & Average Directional Movement Index ADX(14)')
plt.show()

##########

# 4. Bands and Double Crossover Trading Strategy
# Generate Trading Strategy (own stock=1 , not own stock=0, short-selling not available)
spy['adxstr'] = 1
adxstr = 0
for i, r in enumerate(spy.iterrows()):
    if r[1]['adxsig'] == 1:
        adxstr = 1
    elif r[1]['adxsig'] == -1:
        adxstr = 0
    else:
        adxstr = spy['adxstr'][i-1]
    spy.iloc[i, 15] = adxstr
# Trading Strategy Chart
fig3, ax = plt.subplots(3, sharex=True)
ax[0].plot(spy['Close'])
ax[0].legend(loc='upper left')
ax[1].plot(spy['adx'])
ax[1].plot(spy['+di'])
ax[1].plot(spy['-di'])
ax[1].legend(loc='upper left')
ax[2].plot(spy['adxstr'], marker='o', linestyle='')
ax[2].legend(loc='upper left')
plt.suptitle('SPY Close Prices & Average Directional Movement Index ADX(14)')
plt.show()

##########

# 5. Bands and Double Crossover Strategy Performance Comparison

# 5.1. Strategies Daily Returns
# Bands and Double Crossover Strategy Without Trading Commissions
spy['adxdrt'] = ((spy['Close']/spy['Close'].shift(1))-1)*spy['adxstr']
spy.iloc[0, 16] = 0
# Bands and Double Crossover Strategy With Trading Commissions (1% Per Trade)
spy['adxstr(-1)'] = spy['adxstr'].shift(1)
spy['adxtc'] = spy['adxsig']
adxtc = 0
for i, r in enumerate(spy.iterrows()):
    if (r[1]['adxsig'] == 1 or r[1]['adxsig'] == -1) and r[1]['adxstr'] != r[1]['adxstr(-1)']:
        adxtc = 0.01
    else:
        adxtc = 0.00
    spy.iloc[i, 18] = adxtc
spy['adxdrtc'] = (((spy['Close']/spy['Close'].shift(1))-1)-spy['adxtc'])*spy['adxstr']
spy.iloc[0, 19] = 0
# Buy and Hold Strategy
spy['bhdrt'] = (spy['Close']/spy['Close'].shift(1))-1
spy.iloc[0, 20] = 0

# 5.2. Strategies Cumulative Returns
# Cumulative Returns Calculation
spy['adxcrt'] = np.cumprod(spy['adxdrt']+1)-1
spy['adxcrtc'] = np.cumprod(spy['adxdrtc']+1)-1
spy['bhcrt'] = np.cumprod(spy['bhdrt']+1)-1
# Cumulative Returns Chart
spy.plot(y=['adxcrt', 'adxcrtc', 'bhcrt'])
plt.title('Average Directional Movement Index ADX(14) vs Buy & Hold')
plt.legend(loc='upper left')
plt.show()

# 5.3. Strategies Performance Metrics
# Annualized Returns
adxyrt = spy.iloc[251, 21]
adxyrtc = spy.iloc[251, 22]
bhyrt = spy.iloc[251, 23]
# Annualized Standard Deviation
adxstd = np.std(spy['adxdrt'])*np.sqrt(252)
adxstdc = np.std(spy['adxdrtc'])*np.sqrt(252)
bhstd = np.std(spy['bhdrt'])*np.sqrt(252)
# Annualized Sharpe Ratio
adxsr = adxyrt/adxstd
adxsrc = adxyrtc/adxstdc
bhsr = bhyrt/bhstd
# Summary Results Data Table
data = [{'0': '', '1': 'ADX(14)', '2': 'ADX(14)TC', '3': 'B&H'},
        {'0': 'Annualized Return', '1': adxyrt, '2': adxyrtc, '3': bhyrt},
        {'0': 'Annualized Standard Deviation', '1': adxstd, '2': adxstdc, '3': bhstd},
        {'0': 'Annualized Sharpe Ratio (Rf=0%)', '1': adxsr, '2': adxsrc, '3': bhsr}]
table = pd.DataFrame(data)
print(spy)
print(table)
