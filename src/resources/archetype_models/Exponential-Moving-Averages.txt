######################################################
# Stock Technical Analysis with Python               #
# Exponential Moving Averages EMA(5 & 21)            #
# (c) Diego Fernandez Garcia 2015-2017               #
# www.exfinsis.com                                   #
######################################################

# 1. Packages and Data

# Packages Importing
import numpy as np
import pandas as pd
# import pandas_datareader.data as web
import matplotlib.pyplot as plt
import talib as ta

# Data Downloading or Reading

# Google Finance
# No Adjusted Close Prices
# spy = web.DataReader('SPY', 'google', '2016-01-01', '2017-01-01')
# spy['Adj Close'] = spy['Close']

# Yahoo Finance
# spy = web.DataReader('SPY', 'yahoo', '2016-01-01', '2017-01-01')

# Data Reading
spy = pd.read_csv("Data//Stock-Technical-Analysis-Data.txt", index_col='Date', parse_dates=True)

##########

# 2. Exponential Moving Averages EMA(5 & 21) Calculation and Chart

# Technical Indicator Calculation
spy['ema5'] = ta.EMA(np.asarray(spy['Close']), 5)
spy['ema21'] = ta.EMA(np.asarray(spy['Close']), 21)
# Technical Indicator Chart
spy.plot(y=['Close', 'ema5', 'ema21'])
plt.title('SPY Close Prices & Exponential Moving Averages EMA(5 & 21)')
plt.legend(loc='upper left')
plt.show()

##########

# 3. Double Crossover Trading Signals
# Previous Periods Data (avoid back-testing bias)
spy['ema5(-1)'] = spy['ema5'].shift(1)
spy['ema21(-1)'] = spy['ema21'].shift(1)
spy['ema5(-2)'] = spy['ema5'].shift(2)
spy['ema21(-2)'] = spy['ema21'].shift(2)
# Generate Trading Signals (buy=1 , sell=-1, do nothing=0)
spy['emasig'] = 0
emasig = 0
for i, r in enumerate(spy.iterrows()):
    if r[1]['ema5(-2)'] < r[1]['ema21(-2)'] and r[1]['ema5(-1)'] > r[1]['ema21(-1)']:
        emasig = 1
    elif r[1]['ema5(-2)'] > r[1]['ema21(-2)'] and r[1]['ema5(-1)'] < r[1]['ema21(-1)']:
        emasig = -1
    else:
        emasig = 0
    spy.iloc[i, 12] = emasig
# Trading Signals Chart
fig1, ax = plt.subplots(2, sharex=True)
ax[0].plot(spy['Close'])
ax[0].plot(spy['ema5'])
ax[0].plot(spy['ema21'])
ax[0].legend(loc='upper left')
ax[1].plot(spy['emasig'], marker='o', linestyle='')
ax[1].legend(loc='upper left')
plt.suptitle('SPY Close Prices & Exponential Moving Averages EMA(5 & 21)')
plt.show()

##########

# 4. Double Crossover Trading Strategy
# Generate Trading Strategy (own stock=1 , not own stock=0, short-selling not available)
spy['emastr'] = 1
emastr = 0
for i, r in enumerate(spy.iterrows()):
    if r[1]['emasig'] == 1:
        emastr = 1
    elif r[1]['emasig'] == -1:
        emastr = 0
    else:
        emastr = spy['emastr'][i-1]
    spy.iloc[i, 13] = emastr
# Trading Strategy Chart
fig2, ax = plt.subplots(2, sharex=True)
ax[0].plot(spy['Close'])
ax[0].plot(spy['ema5'])
ax[0].plot(spy['ema21'])
ax[0].legend(loc='upper left')
ax[1].plot(spy['emastr'], marker='o', linestyle='')
ax[1].legend(loc='upper left')
plt.suptitle('SPY Close Prices & Exponential Moving Averages EMA(5 & 21)')
plt.show()

##########

# 5. Double Crossover Strategy Performance Comparison

# 5.1. Strategies Daily Returns
# Double Crossover Strategy Without Trading Commissions
spy['emadrt'] = ((spy['Close']/spy['Close'].shift(1))-1)*spy['emastr']
spy.iloc[0, 14] = 0
# Double Crossover Strategy With Trading Commissions (1% Per Trade)
spy['emastr(-1)'] = spy['emastr'].shift(1)
spy['ematc'] = spy['emasig']
ematc = 0
for i, r in enumerate(spy.iterrows()):
    if (r[1]['emasig'] == 1 or r[1]['emasig'] == -1) and r[1]['emastr'] != r[1]['emastr(-1)']:
        ematc = 0.01
    else:
        ematc = 0.00
    spy.iloc[i, 16] = ematc
spy['emadrtc'] = (((spy['Close']/spy['Close'].shift(1))-1)-spy['ematc'])*spy['emastr']
spy.iloc[0, 17] = 0
# Buy and Hold Strategy
spy['bhdrt'] = (spy['Close']/spy['Close'].shift(1))-1
spy.iloc[0, 18] = 0

# 5.2. Strategies Cumulative Returns
# Cumulative Returns Calculation
spy['emacrt'] = np.cumprod(spy['emadrt']+1)-1
spy['emacrtc'] = np.cumprod(spy['emadrtc']+1)-1
spy['bhcrt'] = np.cumprod(spy['bhdrt']+1)-1
# Cumulative Returns Chart
spy.plot(y=['emacrt', 'emacrtc', 'bhcrt'])
plt.title('Exponential Moving Averages EMA(5 & 21) vs Buy & Hold')
plt.legend(loc='upper left')
plt.show()

# 5.3. Strategies Performance Metrics
# Annualized Returns
emayrt = spy.iloc[251, 19]
emayrtc = spy.iloc[251, 20]
bhyrt = spy.iloc[251, 21]
# Annualized Standard Deviation
emastd = np.std(spy['emadrt'])*np.sqrt(252)
emastdc = np.std(spy['emadrtc'])*np.sqrt(252)
bhstd = np.std(spy['bhdrt'])*np.sqrt(252)
# Annualized Sharpe Ratio
emasr = emayrt/emastd
emasrc = emayrtc/emastdc
bhsr = bhyrt/bhstd
# Summary Results Data Table
data = [{'0': '', '1': 'EMA(5 & 21)', '2': 'EMA(5 & 21)TC', '3': 'B&H'},
        {'0': 'Annualized Return', '1': emayrt, '2': emayrtc, '3': bhyrt},
        {'0': 'Annualized Standard Deviation', '1': emastd, '2': emastdc, '3': bhstd},
        {'0': 'Annualized Sharpe Ratio (Rf=0%)', '1': emasr, '2': emasrc, '3': bhsr}]
table = pd.DataFrame(data)
print(spy)
print(table)
